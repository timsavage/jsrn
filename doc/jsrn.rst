#############
What is JSRN?
#############

*JSRN = JavaScript Resource Notation*

Essentially JSRN is format that extends on top of `JSON <http://www.json.org/>`_, it provides all the same features and
data types but extends from the base JSON to allow for easy mapping into an object graph.

The most obvious change is the introduction of the special ``$`` field. The ``$`` field gives the object an explicit
name with identifies the object as a resource. As a resource an object inherits a set of rules that define which fields
are required and acceptable values for those fields.

While all JSON that is generated by the JSRN library includes the ``$`` field it is not strictly necessary, when a
resource is defined other resources that are used to compose a complete document are similarly defined (see
:ref:`field-composite_fields`) but defining the field does provide for additional validation and the use of
polymorphism.

**Example of JSRN document representing a book:**
::

    {
        "$": "library.Book",
        "title": "Consider Phlebas",
        "authors": [
            {
                "$": "library.Author",
                "name": "Iain M. Banks"
            }
        ],
        "publisher": {
            "$": "library.Publisher",
            "name": "Macmillan"
        }
    }


Resource types names
********************

Resource type names consist of a resource name in *TitleCase* which is prefixed with an optional "." delimited
name-space in *lower_underscore* case.

**Examples of valid JSRN resource names:**

* ``library.Book``
* ``my_project.document.DocumentResource``

.. hint::
    As JSRN should work any language (even though the reference implementation is in Python) care should be taken
    to not use characters that are not valid in resource and name space names. For example a "-" character would not be
    valid in most languages for either a namespace or class/object name.


``$`` field and polymorphism
****************************

Another advantage of specifying a resource type is that allows you to take advantage of polymorphism in your data
structures. A great example of this is when building a document that contains many similar elements for example in a
desktop publishing application all elements will require some basic data such as x and y position, height and width but
different types of element will require additional specific data eg a text block will require text, font information
where an image element will require a source image.

.. note::
    The Python JSRN implementation includes support for polymorphic resources. Along with inheritance and abstract
    resources.


Additional field types
**********************

While JSRN is intended work on top of JSON there is also a secondary objective of simplifying the mapping of fields to
native data types. To this end JSRN defines requirements for certain non-standard JSON types.

Date and Time
=============

The JSON specification does not specify any particular format for date and type, this can be problematic if poor choices
are made by a development team when selecting a date format. Common ways of specifying dates are:

* String formatted using locale specific format
* String formatted to ISO_8601
* Integer seconds since epoch

The ISO 8601 format provides a un-ambiguous format that includes timezone information as such this is the format that 
should be used within JSRN resources.
